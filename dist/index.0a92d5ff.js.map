{"mappings":"ACAA,MAAM,EAAK,SAAS,cAAc,CAAC,OAC7B,EAAY,SAAS,cAAc,CAAC,OAEpC,EAAQ,IAAI,MAAM,KAAK,CAEvB,EAAS,IAAI,MAAM,iBAAiB,CAAC,GAAI,OAAO,UAAU,CAAG,OAAO,WAAW,CAAE,GAAK,IAC5F,CAAA,EAAO,QAAQ,CAAC,CAAC,CAAG,GACpB,EAAO,QAAQ,CAAC,CAAC,CAAG,EAEpB,IAAI,EAAS,OAAO,UAAU,CAC1B,EAAS,OAAO,WAAW,CAG/B,MAAM,EAAW,IAAI,MAAM,aAAa,CAAC,CAAC,MAAO,CAAA,EAAM,UAAW,CAAA,CAAI,GACtE,EAAS,aAAa,CAAC,EAAU,GACjC,EAAS,OAAO,CAAC,OAAO,UAAU,CAAE,OAAO,WAAW,EAEtD,OAAO,gBAAgB,CAAC,SAAU,KAC9B,MAAQ,OAAO,UAAU,CACzB,EAAS,OAAO,WAAW,CAE3B,EAAO,MAAM,CAAG,MAAQ,EACxB,EAAO,sBAAsB,GAE7B,EAAS,OAAO,CAAC,MAAO,GACxB,EAAS,aAAa,CAAC,KAAK,GAAG,CAAC,OAAO,gBAAgB,CAAE,IACzD,EAAS,MAAM,CAAC,EAAO,EAC3B,GAEA,EAAS,UAAU,CAAC,YAAY,CAAC,KAAM,QAEvC,AADY,EACR,YAAY,CAAC,EAAS,UAAU,CAAE,GACtC,MAAM,EAAS,IAAI,MAAM,YAAY,CAAC,QAAU,KAEhD,EAAM,GAAG,CAAC,GACV,MAAM,EAAS,IAAI,MAAM,UAAU,CAAC,SAAU,IAC9C,EAAO,QAAQ,CAAC,GAAG,CAAC,GAAI,GAAK,GAC7B,EAAM,GAAG,CAAC,GACV,MAAM,EAAU,IAAI,MAAM,UAAU,CAAC,SAAU,KAC/C,EAAQ,QAAQ,CAAC,GAAG,CAAC,EAAG,EAAG,IAC3B,EAAM,GAAG,CAAC,GAEV,IAAI,EAAS,IAAI,MAAM,UAAU,CAC7B,EAAM,KAEV,EAAO,IAAI,CAAC,gBAAiB,SAAS,CAAI,EAEtC,AADA,CAAA,EAAM,CAAN,EACI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAK,IAAK,KAC9B,EAAM,GAAG,CAAC,EAAI,KAAK,CACvB,GAUA,AARA,SAAS,EAAQ,CAAE,EACf,sBAAsB,GACnB,GACC,CAAA,EAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAI,GAD5B,EAGA,EAAS,MAAM,CAAC,EAAO,EAC3B,IAIA,MAAM,EAAS,CACX,EAAG,CACP,EAUM,EAAM,AAAC,IACV,EAAO,CAAC,CAAI,EAAM,OAAO,CAAG,EAAS,GAChC,EAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAG,AAAW,GAAX,EAAO,CAAC,CAC/B,QAAQ,GAAG,CAAC,EAAO,CAAC,EACpB,EAAS,MAAM,CAAC,EAAO,EAC/B,EAEM,EAAO,AAAC,IACV,EAAO,CAAC,CAAI,EAAM,aAAa,CAAC,EAAE,CAAC,OAAO,CAAG,EAAS,GACjD,EAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAG,AAAW,GAAX,EAAO,CAAC,CAC/B,EAAS,MAAM,CAAC,EAAO,EAC/B,EAED,OAAO,gBAAgB,CAAC,YAAa,AAAC,IAClC,OAAO,gBAAgB,CAAC,YAAa,EACzC,GACA,OAAO,gBAAgB,CAAC,UAAW,AAAC,IAChC,OAAO,mBAAmB,CAAC,YAAa,EAE5C,GACA,OAAO,gBAAgB,CAAC,aAAc,AAAC,IACnC,QAAQ,GAAG,GACX,OAAO,gBAAgB,CAAC,YAAa,EACzC,GACA,OAAO,gBAAgB,CAAC,WAAY,AAAC,IACjC,OAAO,mBAAmB,CAAC,YAAa,AAAC,IACzC,EACJ","sources":["<anon>","model.js"],"sourcesContent":["const ds = document.getElementById(\"2ds\");\nconst container = document.getElementById(\"wds\");\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.z = 20;\ncamera.position.y = 0;\nlet widthd = window.innerWidth;\nlet height = window.innerHeight;\nlet aspectRatio = widthd / height;\nconst renderer = new THREE.WebGLRenderer({\n    alpha: true,\n    antialias: true\n});\nrenderer.setClearColor(0x000000, 0);\nrenderer.setSize(window.innerWidth, window.innerHeight);\nwindow.addEventListener(\"resize\", ()=>{\n    width = window.innerWidth;\n    height = window.innerHeight;\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    renderer.setSize(width, height);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    renderer.render(scene, camera);\n});\nrenderer.domElement.setAttribute(\"id\", \"waka\");\nconst res = container;\nres.insertBefore(renderer.domElement, ds);\nconst aLight = new THREE.AmbientLight(0x404040, 1.8);\nscene.add(aLight);\nconst pLight = new THREE.PointLight(0xFFFFFF, 0.5);\npLight.position.set(-3, 0.5, 5);\nscene.add(pLight);\nconst pLight2 = new THREE.PointLight(0xFFFFFF, 1.3);\npLight2.position.set(4, 4, -3);\nscene.add(pLight2);\nlet loader = new THREE.GLTFLoader();\nlet obj = null;\nloader.load(\"/3d/waka.gltf\", function(gLtf) {\n    obj = gLtf;\n    obj.scene.scale.set(1.3, 1.3, 1.3);\n    scene.add(obj.scene);\n});\nfunction animate(de) {\n    requestAnimationFrame(animate);\n    if (obj) obj.scene.rotation.y += 0.01;\n    renderer.render(scene, camera);\n}\nanimate();\nconst cursor = {\n    x: 0\n};\nfunction animate2(de) {\n    requestAnimationFrame(animate2);\n    if (obj) obj.scene.rotation.y = cursor.x * 10;\n    renderer.render(scene, camera);\n}\nconst red = (event)=>{\n    cursor.x = event.clientX / widthd - 0.5;\n    obj.scene.rotation.y = cursor.x * 10;\n    console.log(cursor.x);\n    renderer.render(scene, camera);\n};\nconst red2 = (event)=>{\n    cursor.x = event.targetTouches[0].clientX / widthd - 0.5;\n    obj.scene.rotation.y = cursor.x * 10;\n    renderer.render(scene, camera);\n};\nwindow.addEventListener(\"mousedown\", (event)=>{\n    window.addEventListener(\"mousemove\", red);\n});\nwindow.addEventListener(\"mouseup\", (event)=>{\n    window.removeEventListener(\"mousemove\", red);\n});\nwindow.addEventListener(\"touchstart\", (event)=>{\n    console.log();\n    window.addEventListener(\"touchmove\", red2);\n});\nwindow.addEventListener(\"touchend\", (event)=>{\n    window.removeEventListener(\"touchmove\", (e)=>{});\n}) // const fs = () => {\n // window.addEventListener('mousedown', (event) => {\n //     window.addEventListener('mousemove', (event) => {    \n //         red()\n //     }); \n // })\n // window.addEventListener('mouseup', (event) => {\n //     console.log('grgrgt')\n //     window.removeEventListener('mousedown', red, false)\n // })\n // }\n // fs()\n // const tick = () => {\n //             obj.scene.rotation.y = cursor.x * 10\n //     renderer.render(scene, camera)\n //     requestAnimationFrame(tick)\n // }\n // window.addEventListener('mousedown', (event) => {\n // window.addEventListener('mousemove', (event) => {    \n //     cursor.x = (event.clientX / widthd - 0.5)\n //     // tick();\n //     obj.scene.rotation.y = cursor.x * 10\n //     renderer.render(scene, camera)\n // });\n // window.addEventListener('mouseup', (event) => {\n //     // animate()\n //     cursor.x = 0\n //     obj.scene.rotation.y = 0\n //     renderer.render(scene, camera)\n // })\n // })\n // animate();\n // const frf = () => {\n //     let per = 0\n // window.addEventListener('mousedown', () => {\n //     per = 1;\n //     if (per === 1) {\n //     window.addEventListener('mousemove', (event) => {\n //     cursor.x = (event.clientX / widthd - 0.5)\n //     obj.scene.rotation.y = cursor.x * 10\n //     renderer.render(scene, camera)\n //     })\n //     } else {\n //     window.addEventListener('mouseup', () => {\n //     per = 0\n //     console.log(per)\n // })\n //     }\n //     console.log(per)\n // })\n // }\n // frf()\n // const canvas = document.querySelector('body')\n // let ispressed = false;\n // canvas.addEventListener('mousedown', function(){\n //     ispressed = true\n //   })\n // canvas.addEventListener('mouseup', function(){\n //     ispressed = false\n //   })\n //   if(ispressed) {\n //     tick()\n //   }\n;\n\n//# sourceMappingURL=index.0a92d5ff.js.map\n","const ds = document.getElementById('2ds');\r\nconst container = document.getElementById('wds');\r\n\r\nconst scene = new THREE.Scene();\r\n\r\nconst camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 0.1, 1000);\r\ncamera.position.z = 20;\r\ncamera.position.y = 0;\r\n\r\nlet widthd = window.innerWidth;\r\nlet height = window.innerHeight;\r\nlet aspectRatio = widthd / height;\r\n\r\nconst renderer = new THREE.WebGLRenderer({alpha: true, antialias: true});\r\nrenderer.setClearColor(0x000000, 0);\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\nwindow.addEventListener('resize', () => {\r\n    width = window.innerWidth;\r\n    height = window.innerHeight;\r\n\r\n    camera.aspect = width / height;\r\n    camera.updateProjectionMatrix();\r\n\r\n    renderer.setSize(width, height);\r\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    renderer.render(scene, camera)\r\n});\r\n\r\nrenderer.domElement.setAttribute(\"id\", \"waka\");\r\nconst res = container;\r\nres.insertBefore(renderer.domElement, ds);\r\nconst aLight = new THREE.AmbientLight(0x404040, 1.8);\r\n\r\nscene.add(aLight);\r\nconst pLight = new THREE.PointLight(0xFFFFFF, 0.5);\r\npLight.position.set(-3, 0.5, 5);\r\nscene.add(pLight);\r\nconst pLight2 = new THREE.PointLight(0xFFFFFF, 1.3);\r\npLight2.position.set(4, 4, -3);\r\nscene.add(pLight2);\r\n\r\nlet loader = new THREE.GLTFLoader();\r\nlet obj = null;\r\n\r\nloader.load('/3d/waka.gltf', function(gLtf) {\r\n    obj = gLtf;\r\n    obj.scene.scale.set(1.3, 1.3, 1.3);\r\n    scene.add(obj.scene);\r\n});\r\n\r\nfunction animate(de) {\r\n    requestAnimationFrame(animate);\r\n    if(obj) {\r\n        obj.scene.rotation.y += 0.01;\r\n    }\r\n    renderer.render(scene, camera);\r\n};\r\n\r\nanimate()\r\n\r\nconst cursor = {\r\n    x: 0,\r\n}\r\n\r\nfunction animate2(de) {\r\n    requestAnimationFrame(animate2);\r\n    if(obj) {\r\n        obj.scene.rotation.y = cursor.x * 10;\r\n    }\r\n    renderer.render(scene, camera);\r\n};\r\n\r\nconst red = (event) => {\r\n   cursor.x = (event.clientX / widthd - 0.5)\r\n        obj.scene.rotation.y = cursor.x * 10\r\n        console.log(cursor.x)\r\n        renderer.render(scene, camera)\r\n}\r\n\r\nconst red2 = (event) => {\r\n    cursor.x = (event.targetTouches[0].clientX / widthd - 0.5)\r\n         obj.scene.rotation.y = cursor.x * 10\r\n         renderer.render(scene, camera)\r\n }\r\n\r\nwindow.addEventListener('mousedown', (event) => {\r\n    window.addEventListener('mousemove', red)\r\n})\r\nwindow.addEventListener('mouseup', (event) => {\r\n    window.removeEventListener('mousemove', red)\r\n    \r\n})\r\nwindow.addEventListener('touchstart', (event) => {\r\n    console.log()\r\n    window.addEventListener('touchmove', red2)\r\n})\r\nwindow.addEventListener('touchend', (event) => { \r\n    window.removeEventListener('touchmove', (e) => {   \r\n    } )\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const fs = () => {\r\n// window.addEventListener('mousedown', (event) => {\r\n//     window.addEventListener('mousemove', (event) => {    \r\n//         red()\r\n//     }); \r\n// })\r\n// window.addEventListener('mouseup', (event) => {\r\n//     console.log('grgrgt')\r\n//     window.removeEventListener('mousedown', red, false)\r\n// })\r\n// }\r\n// fs()\r\n\r\n\r\n// const tick = () => {\r\n\r\n     \r\n//             obj.scene.rotation.y = cursor.x * 10\r\n    \r\n//     renderer.render(scene, camera)\r\n//     requestAnimationFrame(tick)\r\n// }\r\n\r\n// window.addEventListener('mousedown', (event) => {\r\n// window.addEventListener('mousemove', (event) => {    \r\n//     cursor.x = (event.clientX / widthd - 0.5)\r\n//     // tick();\r\n//     obj.scene.rotation.y = cursor.x * 10\r\n    \r\n//     renderer.render(scene, camera)\r\n// });\r\n// window.addEventListener('mouseup', (event) => {\r\n//     // animate()\r\n//     cursor.x = 0\r\n//     obj.scene.rotation.y = 0\r\n//     renderer.render(scene, camera)\r\n// })\r\n// })\r\n// animate();\r\n\r\n\r\n\r\n// const frf = () => {\r\n//     let per = 0\r\n// window.addEventListener('mousedown', () => {\r\n//     per = 1;\r\n//     if (per === 1) {\r\n//     window.addEventListener('mousemove', (event) => {\r\n//     cursor.x = (event.clientX / widthd - 0.5)\r\n//     obj.scene.rotation.y = cursor.x * 10\r\n//     renderer.render(scene, camera)\r\n//     })\r\n//     } else {\r\n//     window.addEventListener('mouseup', () => {\r\n//     per = 0\r\n//     console.log(per)\r\n// })\r\n//     }\r\n//     console.log(per)\r\n// })\r\n// }\r\n// frf()\r\n\r\n\r\n\r\n// const canvas = document.querySelector('body')\r\n// let ispressed = false;\r\n// canvas.addEventListener('mousedown', function(){\r\n//     ispressed = true\r\n//   })\r\n// canvas.addEventListener('mouseup', function(){\r\n//     ispressed = false\r\n//   })\r\n\r\n//   if(ispressed) {\r\n//     tick()\r\n//   }"],"names":["ds","document","getElementById","container","scene","THREE","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","y","widthd","height","renderer","WebGLRenderer","alpha","antialias","setClearColor","setSize","addEventListener","width","aspect","updateProjectionMatrix","setPixelRatio","Math","min","devicePixelRatio","render","domElement","setAttribute","res","insertBefore","aLight","AmbientLight","add","pLight","PointLight","set","pLight2","loader","GLTFLoader","obj","load","gLtf","scale","animate","de","requestAnimationFrame","rotation","cursor","x","red","event","clientX","console","log","red2","targetTouches","removeEventListener","e"],"version":3,"file":"index.0a92d5ff.js.map"}